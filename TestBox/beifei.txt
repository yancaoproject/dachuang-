#include <Arduino.h>
#include <Arduino_FreeRTOS.h>
#include <Array.h>
#include "Configuration.h"

#include <SoftwareSerial.h>
// 避免使用已配置的引脚，这里假设使用其他引脚
SoftwareSerial SerialCommand(2, 3);

int frequency = 10;

void taskCommandInterface(void* parameters);
TaskHandle_t taskCommandInterfaceHandle = NULL;
void taskLooper(void* parameters);
TaskHandle_t taskLooperHandle = NULL;

void setup() {
    // NewPinConfiguration(2, ARRAY(PinFunction::readDigital, PinFunction::writeDigital))
    // NewPinConfiguration(3, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::writeAnalog))
    NewPinConfiguration(4, ARRAY(PinFunction::readDigital, PinFunction::writeDigital))
    NewPinConfiguration(5, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::writeAnalog))
    NewPinConfiguration(6, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::writeAnalog))
    NewPinConfiguration(7, ARRAY(PinFunction::readDigital, PinFunction::writeDigital))
    NewPinConfiguration(8, ARRAY(PinFunction::readDigital, PinFunction::writeDigital))
    NewPinConfiguration(9, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::writeAnalog))
    NewPinConfiguration(10, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::writeAnalog))
    NewPinConfiguration(11, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::writeAnalog))
    NewPinConfiguration(A0, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::readAnalog))
    NewPinConfiguration(A1, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::readAnalog))
    NewPinConfiguration(A2, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::readAnalog))
    NewPinConfiguration(A3, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::readAnalog))
    NewPinConfiguration(A4, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::readAnalog))
    NewPinConfiguration(A5, ARRAY(PinFunction::readDigital, PinFunction::writeDigital, PinFunction::readAnalog))
    
    Serial.begin(115200);
    Serial.println("Debug Start");
    SerialCommand.begin(115200);
    
    xTaskCreate(taskCommandInterface, "Command Interface", 256, NULL, 1, NULL);
    xTaskCreate(taskLooper, "Looper", 256, NULL, 1, NULL);
    vTaskStartScheduler();
    vTaskSuspend(taskLooperHandle);
    TaskHandle_t xHandle = NULL;
    BaseType_t xReturned = xTaskCreate(
        taskCommandInterface, "Command Interface", 1000, NULL, 1, &taskCommandInterfaceHandle          /* 任务句柄 */
    );

    if (xReturned != pdPASS) {
        // 任务创建失败，处理错误
        Serial.println("Task creation failed!");
    }
}

void loop() { }

// FreeRTOS Tasks

void taskCommandInterface(void* parameters) {
    Serial.println("taskcommand");
    while (true) { 
        Serial.print("Received command: ");
        
        if (SerialCommand.available() > 0) {
            uint8_t command = Serial.read();
            Serial.println("new command");
            switch (command) {
            case Command::functionMap:
                SerialCommand.print(Response::ok);
                Serial.println("Function Map");
                break;
            case Command::getPinFunction:
                if (SerialCommand.available() > 0) {
                    uint8_t pin = SerialCommand.read();
                    // 查找引脚配置
                    for (int i = 0; i < PinConfigurations.count(); i++) {
                        if (PinConfigurations[i].pin == pin) {
                            SerialCommand.print(Response::ok);
                            SerialCommand.print(PinConfigurations[i].selectedFunction);
                            Serial.print("Pin ");
                            Serial.print(pin);
                            Serial.println(" function retrieved");
                            break;
                        }
                    }
                }
                break;
            case Command::setPinFunction:
                if (SerialCommand.available() > 1) {
                    uint8_t pin = SerialCommand.read();
                    uint8_t function = SerialCommand.read();
                    // 查找引脚配置并设置功能
                    for (int i = 0; i < PinConfigurations.count(); i++) {
                        if (PinConfigurations[i].pin == pin) {
                            PinConfigurations[i].selectedFunction = static_cast<PinFunction>(function);
                            SerialCommand.print(Response::ok);
                            Serial.print("Pin ");
                            Serial.print(pin);
                            Serial.print(" function set to ");
                            Serial.println(function);
                            break;
                        }
                    }
                }
                break;
            case Command::startLoop:
                vTaskResume(taskLooperHandle);
                SerialCommand.print(Response::ok);
                Serial.println("Start Loop");
                break;
            default:
                SerialCommand.print(Response::error);
                Serial.print("Error");
                break;
            }
        }
    }
}

void taskLooper(void* parameters) {
    Serial.println("tasklooper");
    while (true) {
        for(int i = 0; i < PinConfigurations.count(); i++) {
            switch (PinConfigurations[i].selectedFunction) {
                case PinFunction::readDigital:
                    Serial.println("read digital");
                    break;
                case PinFunction::writeDigital:
                    Serial.println("write digital");
                    break;
                case PinFunction::readAnalog:
                    Serial.println("read analog"); // 修正错误信息
                    break;
                case PinFunction::writeAnalog:
                    Serial.println("write analog"); // 修正错误信息
                    break;
            }
        }
        
        if (SerialCommand.available() > 0) {
            uint8_t command = SerialCommand.read();
            switch (command) {
            case Command::stopLoop:
                vTaskSuspend(taskLooperHandle);
                vTaskResume(taskCommandInterfaceHandle);
                SerialCommand.print(Response::ok);
                Serial.println("Stop Loop");
            default:
                SerialCommand.print(Response::error);
                Serial.println("Error");
                break;
            }
        }

        // delay depending on capture Hz
        vTaskDelay(100 / portTICK_PERIOD_MS);
    // }
}